name: Deploy to Self-Hosted Server
on:
  workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          cat >> ~/.ssh/config <<EOL
          Host myserver
            HostName ssh.rojoinferno.com
            User afif
            IdentityFile ~/.ssh/id_ed25519
            ProxyCommand cloudflared access ssh --hostname %h --id ${{ secrets.CF_TUNNEL_CLIENT_ID }} --secret ${{ secrets.CF_TUNNEL_CLIENT_SECRET }} 
          EOL

      - name: Deploy via Cloudflare Tunnel
        env:
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_TUNNEL_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_TUNNEL_CLIENT_SECRET }}
          REPO: ${{ github.repository }}
        run: |
          ssh -o StrictHostKeyChecking=no myserver << 'EOF'
            echo 'âœ… Connected via Cloudflare Tunnel!'
            echo ${{ github.repository }}
            echo https://github.com/${REPO}.git
            APP_DIR=~/apps/nestjs-app

            REPOSITORY="https://github.com/${{ github.repository }}.git"
            echo $REPOSITORY
            # kalau folder belum ada -> clone
            if [ ! -d "$APP_DIR" ]; then
              echo "ðŸ“‚ Project belum ada, cloning baru..."
              mkdir -p ~/apps
              cd ~/apps
              git clone $REPOSITORY nestjs-app
              cd nestjs-app
            else
              echo "ðŸ“‚ Project sudah ada, pull update..."
              cd $APP_DIR
              git fetch --all
              git reset --hard origin/main
            fi
      
            # build & deploy docker
            docker compose pull
            docker compose build --no-cache
            docker compose up -d --remove-orphans
      
            # bersihkan docker yang tidak terpakai
            docker system prune -af
      
            echo 'ðŸš€ Deploy selesai!'
          EOF
